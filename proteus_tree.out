
R version 3.3.3 (2017-03-06) -- "Another Canoe"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(ShortRead)
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, cbind, colnames, do.call,
    duplicated, eval, evalq, Filter, Find, get, grep, grepl, intersect,
    is.unsorted, lapply, lengths, Map, mapply, match, mget, order,
    paste, pmax, pmax.int, pmin, pmin.int, Position, rank, rbind,
    Reduce, rownames, sapply, setdiff, sort, table, tapply, union,
    unique, unsplit, which, which.max, which.min

Loading required package: BiocParallel
Loading required package: Biostrings
Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following objects are masked from ‘package:base’:

    colMeans, colSums, expand.grid, rowMeans, rowSums

Loading required package: IRanges
Loading required package: XVector
Loading required package: Rsamtools
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: GenomicAlignments
Loading required package: SummarizedExperiment
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> library(ape)

Attaching package: ‘ape’

The following object is masked from ‘package:ShortRead’:

    zoom

The following object is masked from ‘package:Biostrings’:

    complement

> library(phangorn)
> library(DECIPHER)
Loading required package: RSQLite
> 
> args <- commandArgs(TRUE)
> print(args)
[1] "2"  "1"  "45"
> 
> if (length(args) != 3) stop('Provide 3 args: index, cores, seed')
> i <- as.integer(args[1])
> nc <- as.integer(args[2])
> seed <- as.integer(args[3])
> 
> cat(sprintf('Running simulation for %s with %s cores, seed %s.\n',i,nc,seed))
Running simulation for 2 with 1 cores, seed 45.
> 
> nexp <- function(x) exp(1)^(-x)
> 
> get_node_label <- function(tree,idx){
+   if (idx > length(tree$tip.label)){
+     node <- tree$node.label[idx - length(tree$tip.label)]
+   }else{
+     node <- tree$tip.label[idx]
+   }
+   return(node)
+ }
> 
> create_tree_sim <- function(alignment,fun_dist,fun_tree,ncores=1,verbose=FALSE){
+   
+   fun_dist <- match.fun(fun_dist) 
+   fun_tree <- match.fun(fun_tree)
+   
+ 
+   
+   if (verbose) cat('Computing pairwise distances... ')
+   d <- fun_dist(alignment)
+   if (verbose) cat('complete.\n')
+   
+   if (verbose) cat('Creating tree... ')
+   tree <- fun_tree(d) 
+   if (verbose) cat('complete.\n')
+   
+   if (verbose) cat('Formatting tree and traits... ')
+   tree <- multi2di(tree,random=FALSE)
+   # tree$node.label <- paste0('internal_node_',seq_along(unique(tree$edge[,1])))
+   # tree$edge.length[tree$edge.length < .0001] <- .0001
+   
+   return(tree)
+   
+ }
> 
> set.seed(seed)
> ncores <- nc
> 
> seq_path <- '~/Documents/rcrust/seqtab.rds'
> ref_path <- '~/Documents/rcrust/reference_files'
> out_path <- sprintf('~/Documents/rcrust/testing_workflow/tree_7_10/rtree%s.tree',i)
> 
> # change dist.ml
> # change nj
> 
> # alignment <- readRDS(file.path(ref_path,'alignment.rds'))
> # tree <- create_tree_sim(alignment,dist.ml,nj,ncores=ncores,verbose=TRUE)
> # write.tree(tree,out_path)
> 
> data(Laurasiatherian)
> tree <- create_tree_sim(Laurasiatherian,dist.hamming,nj,ncores=ncores,verbose=TRUE)
Computing pairwise distances... complete.
Creating tree... complete.
Formatting tree and traits... > cat(sprintf('Writing tree to %s.\n',out_path))
Writing tree to ~/Documents/rcrust/testing_workflow/tree_7_10/rtree2.tree.
> write.tree(tree,out_path)
> 
> proc.time()
   user  system elapsed 
  9.176   0.192  12.651 
